<html>
<head>
    <title>What makes for good technical writing?</title>
    <link rel='stylesheet' type='text/css' href='../css/common.css'/>
</head>

<body>
    <div class='wrapper article'>
        <p>
        <a href='../index.htm'>home</a>
        </p>
        
        <hr/>
        <h1>What makes for good technical writing?</h1>
        <p><em>Bill Blondeau</em></p>
        
        <p>
        This article is the first in a series. The series is a practical overview of the best ways to get good-quality technical writing done.
        </p>
        <p>
        This is largely a distillation of years' worth of work doing technical documentation of various sorts. However, a lot of it was founded on an an excellent book, <a href='http://www.worldcat.org/title/analytical-writing-a-handbook-for-business-and-technical-writers/oclc/560720' target='_blank'>Analytical Writing</a>, by Thomas P. Johnson (Harper &amp; Row, 1966). Unfortunately, the book's out of print.
        </p>
        <p>
        I was also recently pleased to acquire a copy of Anne E. Greene's book <a href='http://www.press.uchicago.edu/ucp/books/book/chicago/W/bo15288825.html' target='_blank'>Writing Science in Plain English</a> (University of Chicago Press, 2013). Greene reinforces a lot of the precepts in <em>Analytical Writing</em>, and adds a lot of complementary insights, especially as applied to scientific writing and the extremely poor literary conventions imposed upon the academic world of science.
        </p>

        <h2>What to expect</h2>
        <p>
        This is an <strong>introductory</strong> article. It lays out the subject in a bare-bones fashion. There's
        </p>
        <ul>
            <li>
                <strong>The overobvious essential principle</strong> you have to follow;</li>
            <li>
                A brief description of the fundamental concept of <strong>cognitive burden</strong>;</li>
            <li>
                One list of <strong>things you should do</strong> as a technical writer;</li>
            <li>
                And one list of <strong>things you should NOT do</strong> as a technical writer;</li>
        </ul>

        <h3>The rest of the articles will be descendants</h3>
        <p>
        This article is big enough without detail diving. Subsequent articles will unpack the list items, and any supporting topics that deserve a fuller discussion. These descendant articles will be forward and backward linked.
        </p>

        <p>
        So far:
        </p>
        <ul>
        <li><a href='analytical_writing.html'>Practical Analytical Writing</a>, an overview of how to outline a technical or scientific work, how to recognize the "reflexes of incomprehension" that readers can exhibit, and how to use written language to prevent those reflexes (or to save readers who've gotten into that kind of trouble).</li>
        </ul>

        <p>
        ...So, let's get right to it.
        </p>

        <h2>You have one job: <em>informing the reader.</em></h2>
        <p>
        There's no more important guideline in technical writing than this: <strong>technical writing is entirely about conveying information to the reader.</strong>
        </p>
        <p>
        Which sounds... kind of obvious?
        </p>
        <p>
        Sadly, considerable evidence indicates otherwise. There's a lot of terrible, awful, no-good scientific and technical writing out there; and it's bad in a way that suggests that this "one job" gets less attention than it should. 
        </p>
        <p>
        This article assumes that you don't want to add to the problem. It offers advice to keep you out of trouble.
        </p>
        <p>
        The first and most important piece of advice is to really accept the guideline above: <em>You are here to inform the reader.</em> Everything else follows from that.
        </p>
        <p>
        You inform the reader by giving her well-organized information in a way that fosters <em>clear and accurate understanding</em>, while requiring the <em>lowest reasonable effort</em> on her part.
        </p>
        <p>
        <em>She's interested in understanding the material</em>&mdash;that's why she's reading your article, book, or whatever in the first place. She <em>doesn't want to burn up her time and attention</em> just to make scant, laborious progress through your written work. 
        </p>
        <p>
        You owe her a fair chance.
        </p>
        <p>
        You should be very much focused on reaching the reader: not emotionally, not even intellectually really, but <span class='hey'>cognitively</span>. You're in the business of conveying information that the reader can assemble, in her thought, into useful and accurate structures of understanding.
        </p>
        <p>
        That's it. That's all you're doing.
        </p>
        <p>
        Compose and write for the reader's understanding, and for nothing else. If you can buckle down and truly do this, you'll be way ahead of the pack.
        </p>
        <p>
        I mentioned establishing a "cognitive" connection with the reader? There's one key concept for understanding the difference between getting that right and getting it wrong.
        </p>

        <h2>Cognitive Burden</h2>
        <p>
        Cognitive burden, in expository writing, is <strong>a measure of how much mental effort the reader has to exert in order to grasp the material you are writing about</strong>. It's related to <a href='https://en.wikipedia.org/wiki/Cognitive_load' target='_blank'>"cognitive load"</a>, a more formal term from <a href='http://en.wikipedia.org/wiki/Cognitive_psychology' target='_blank'>cognitive psychology</a>. I won't recapitulate the psychology now&mdash;the links are there, if you want to dig in&mdash;but the core practical insight we can draw from cognitive load, and apply to technical writing, is this:
        </p>
        <ul>
            <li>
            <strong>Some cognitive burden is more or less baked into a given topic</strong>. It's hard to do much about that. As a writer, you can't <em>change</em> the fundamental information regarding Data Analytics, or the Bessemer Process, or the Haskell type model, into something other than what they are already known to be.
            <p>
            As a technical writer, you're describing an immutable information set.
            </p>
            </li>
            <li>
            <strong>Some cognitive burden, on the other hand, is a side effect of organization and presentation.</strong> You can make huge strides with this. You can help the reader a lot. You can <em>present</em>, you can <em>describe</em>, you can <em>explain</em> Data Analytics, the Bessemer Process, the Haskell type model, or the Oxford comma in ways that help the reader grasp what's going on. Clearly. Sensibly. With minimal work.
            </li>
        </ul>
        <p>
        As a technical writer, always focus on the second bullet: <em>changing the things that are in <strong>your</strong> territory.</em>
        </p>
        <p>
        Cognitive burden can arise in almost any part of your work.
        </p>
        <p>
        You may screw up the analysis, misidentifying key concepts, or misunderstanding them. You may fail to organize the material clearly. You may construct jumbled or unfinished explanations.
        </p>
        <p>
        Your prose might be awkward, distracting, filled with garbage. You may write paragraphs longer than <a href='http://en.wikipedia.org/wiki/William_Faulkner' target='_blank'>William Faulkner</a>, in full stream-of-consciousness mode, ever did. You may overuse abstractions. You may be a serial prepositioner. You may simply suck at writing sentences that help the reader stay with you, in the frame, in the picture.
        </p>
        <p>
        You need to learn to avoid these things, to notice them when they happen, and to know how to repair them. <strong>Aside from actual misinformation, cognitive burden is the worst thing you will ever impose on the reader.</strong> Doublecheck yourself. Work hard on recognizing and correcting cognitive burden.
        </p>
        <p>
        It says something unhappy about the field of technical writing that the level of cognitive burden is characteristically pretty high.
        </p>




        <h2>Technical Writing Done Right: the happy list</h2>
        <p>
        There are lots of things that you can do to help the reader grasp the material without undue effort. These are the ones that matter the most. This list is hopefully short enough, and simple enough, that it can lodge in your memory.
        </p>
        <p>
        (Remember, though: <em>simple</em> doesn't mean easy. There's work here.)
        </p>
        <p>
        This is the <strong>"Always Helpful, Never Wrong"</strong> list of writing practices. The more fully you can apply these, the better your technical writing will be.
        </p>
        <ul>
            <li>
            <strong><span class='hey'>Minimize</span> cognitive burden on the reader.</strong> Technical material, by its nature, will impose certain irreducible task loads on the reader's thought. Don't make matters worse. Side excursions, misplaced detail diving, fascinating but inessential insights: try not to. Even if they seem just too cool to pass up.
            </li>
            <li>
            <strong>Organize the writing according to key concepts.</strong> Correctly identifying the essential concepts of the material is crucial. There shouldn't be too many of them. Structure your written piece around those concepts.
            </li>
            <li>
            <strong>Use headers, subheaders, blockquotes, blank lines, etc.</strong> to frame the structure.
            </li>
            <li>
            <strong>Structure pays off. Do it right.</strong> Organize the material to boost the reader's processes of understanding. Anticipate which parts will be confusing or difficult, and insert extra explanation there.
            </li>
            <li>
            <strong>Reiterate key concepts</strong> as you go. <strong>Return. Repeat. Reexamine. Remind.</strong> And try to do so in multiple contexts. Each time the reader is introduced to some different application of a key concept, she is nailing that concept down a little more firmly.
            </li>
            <li>
            <strong>Use examples.</strong> Illustrative examples are immensely useful because, <strong>for cognitive purposes, concrete is better than abstract.</strong> (At least, in the beginning.)
            <p>
            Abstractions are incredibly powerful and helpful for <em>analysis and synthesis</em>, but they are usually insufficient for introductory </em>explanations. <em>Give concrete, explicit examples before exploring the abstractions they illustrate.</em> You won't be sorry.
            </p>
            </li>
            <li>
            <strong>Keep the details separate from the concepts.</strong> Seriously. If you introduce details to explain a point, or to make an example, make damned sure the reader knows that that's what you're up to. Don't let the reader start to feel confused about whether she's getting core explanations&mdash;or supporting examples based on arbitrary / contrived data.
            </li>
            <li>
            <strong>Diagrams, if you do them right, are often immensely helpful.</strong> Giving the reader the ability to cross-check between prose and graphical representation of the same information is extremely powerful. (Poorly executed diagrams, on the other hand, are worse than useless. Know your limitations.)
            </li>
            <li>
            Speaking of diagrams: bear in mind that <strong>some readers grasp visual presentation better than verbal; some do better with verbal explanations.</strong> Do your best to support both kinds of interpretations.
            </li>
        </ul>

        <h2>Technical Writing Self-sabotage Tragedies: the sad sorrowful list</h2>
        <p>
        There are some <strong>common, deeply unfortunate, poorly founded behaviors that technical writers often exhibit</strong>. Usually these writers mean well, and think they're doing the right thing. They are not. These things result in bad work. 
        </p>
        <p>
        This is often a difficult issue, because it's (at least partly) rooted in social conformity. Even worse, it's often driven by insecurity on the part of technically-adept people: they aren't confident in their verbal skills, so they support bad writing as a norm.
        </p>
        <p>
        In some scientific and technical communities and organizations, awful terrible no-good writing is, in fact, expected and conventional. Sometimes, it's demanded outright. Your best response is to do a better job without bowing to the pressure to write badly, and see if it's acceptable. Sometimes you <em>can</em> move that needle.
        </p>
        <p>(And, even if your article or paper is rejected for insufficient obfuscation, you have the benefit of having completed a superior draft. Save it separately, disfigure the next draft to order, and move on.)
        </p>
        <p>
        Check yourself&mdash;your natural style, <em>and</em> your individual drafts. <strong>Wherever, whenever, you find instances of the following failures, fix them.</strong> Then, work on not doing it in future.
        </p>
        <ul>
            <li>
                <strong>A stilted, formal, impersonal style.</strong> Many people seem to think that it's a convention of the tech writing trade (it is), and therefore necessary (it isn't.) What it <em>is</em>, is a miserably bad, needlessly offputting way to communicate information to the reader.
                <p>
                Note that this is even worse in scientific papers, generally, than in tech writing.
                </p>
            </li>
            <li>
                <strong>Boilerplate, stock phrases, and meaningless conventional verbiage.</strong> Again, many people seem to feel that this kind of thing is expected; that <em>it's polite form</em> in the technical writing field. Again, no. This does nothing to foster understanding, and a lot to hinder it. It's just static.
            </li>
            <li>
                <strong>Assuming that the reader magically knows everything that's in the forefront of <em>your</em> mind right now.</strong> She doesn't.

                <p>And in a couple of weeks, you won't either.</p>

                <p>When you're thinking, "I don't have to explain <em>that!</em>" you're making a very common, and very destructive, blunder, based on a temporary cognitive state: <strong>when your head's in the game, you underestimate the game's difficulty.</strong> And you neglect the precursors of reason and information that got you there.</p>

                <p>Write for when your head is not in the game. And write for the user whose head never was.</p>
            </li>
            <li>
                <strong>Flinching back from basic explanations.</strong> Many technical writers are worried that readers will feel impatient, even offended, when presented with explanations of things they already know. Not generally true. <em>Most readers will feel <strong>good</strong> when they read a clear, intelligent exposition of something they already know.</em>
                <p>
                They will be <strong>oriented</strong>, because the material is now attached to something they already know.
                </p>
                <p>
                They will be <strong>gratified</strong>. Possibly even <strong>smug</strong>. <em>Smug is good</em> in a reader. Smug means that they are more than willing to pay close attention to the rest of the things you say.
                </p>
            </li>
        </ul>

        <p>
        The two foregoing lists are the core practices that this article advocates. If all you do is write the bold text on your hand with a ballpoint pen, you will be better off than you were.
        </p>


        <h2>Go forth and sin... a little less</h2>
        <p>
        So, Dear Writer, there you have it.
        </p>
        <p>
        There are many other things you can, and should, do if you want to be a good and honorable technical writer. But if you start out by following the principles and practices sketched out here, you'll be treating your readers a lot better than if you don't.
        </p>
        <p>
        Stay tuned for further installments.
        </p>
    </div>
</body>
</html>
