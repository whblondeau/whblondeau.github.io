<html>
<head>
    <title>Bill Blondeau Project History</title>
    <link rel='stylesheet' type='text/css' href='../css/common.css'/>
    <link rel='stylesheet' type='text/css' href='../css/history.css'/>
</head>
<body>
    <div class='wrapper'>
        <p>
        <a href='../index.htm'>home</a>
        </p>
        <p class='instruct'>If your workflow requires a copy of this history, the simplest way is to copy everything below the line and paste it into a Word doc. If you would prefer that I generate one for you, email me at <a href='mailto:whblondeau@gmail.com'>whblondeau@gmail.com</a>. I'll happily and promptly send it.</p>
        <hr/>
        <h1>Bill Blondeau Software Position &amp; Project History</h1>
        <div class='contact-info'>
            <p>Bill Blondeau</p>
            <p>122 N. 6th St.</p>
            <p>Madison, WI 53704</p>
            <p><a href='mailto:whblondeau.com'>whblondeau@gmail.com</a></p>
            <p><a href='http://billblondeau.com'>http://billblondeau.com</a></p>
            <p>References upon request.</p>
        </div>

        
        <a name='webcourseworks'></a>
        <h3>Web Courseworks: <code>DevOps</code> Software deployment to Staging  &mdash; January 2018 to present</h3>
        <p class='role'>DevOps</p>
        <p>
        Web Courseworks maintains numerous GitHub repositories for several products. These all need to have new features and bugfixes applied; also, changes to the more general feature repositories need to be propagated to customized repos. Changes must then be pushed to the corresponding Staging servers for testing.
        </p>
        <p>
        Code merges involve GitHub Pull Requests, scripted git commands, and manual sequences of git commands. This is followed by deployment to various hosting services, including Amazon Web Services. Pre-deploy database backups are often required. Often, several merge/push operations occur simultaneously.
        </p>
        <p>
        I've done the majority of these operations for Web Courseworks for over a year. To keep this critical sequence of operations in order, keep things from falling through the cracks, and provide summary reports of actions taken, I wrote several Python utilities, which have proven to be indispensable.
        </p>
        <p class='tools'>git, GitHub, ssh, Ansible, MySQL, AWS, Python, vim</p>

        
        <a name='webcourseworks'></a>
        <h3>Web Courseworks: <code>PHP Developer</code> CourseStage Learning Management System  &mdash; December 2017 to present</h3>
        <p class='role'>Developer</p>
        <p>
        CourseStage is Web Courseworks's flagship product. It is a software as a service application built on top of <a href='https://moodle.org/'>Moodle</a>, a worldwide open source Learning Management System project.
        </p>
        <p>
        CourseStage is a very large monolithic object-oriented PHP application. The underlying Moodle codebase was from the beginning optimized for plugin-based extensibility. As a consequence, there is a heavy emphasis on in-application frameworks to standardize common operations. The database does not enforce referential integrity (another plugin optimization), so the application has to do so.
        </p>
        <p>
        All in all, challenging and interesting work.
        </p>
        <p class='tools'>PHP, git, GitHub, NetBeans, MySQL, VirtualBox, elasticsearch, JavaScript</p>

        <a name='marcout'></a>
        <h3>MARCout bibliographic export (November 2017 to January 2018)</h3>
        <p class='role'>Designer, Developer</p>
        <p>
        The <a href='http://www.loc.gov/marc/bibliographic/'>MARC 21 format</a> is a bibliographic data representation standard published by the Library of Congress. Despite its difficult aspects (it's old, it goes back to times when information was expensive to store and represent, and its implementations are often inconsistently complete&mdash;the joke goes, "MARC is already here, it's just not evenly distributed yet"), MARC 21 is deeply embedded in library information systems everywhere.
        </p>
        <p>
        This project was requested by Rabble as a more robust means of providing MARC21 bibliographic exports of Rabble customers' MUSICat music catalogs. The primary purpose was for the customers to extract bibliographic information from their MUSICat instance, and import it into their own main library catalogs. Important additional uses include the ability to provision shared catalogs.
        </p>
        <p>
        Since the customers wanted various combinations and sequences of MARC elements in their import records, using various serializations&mdash;MARC, like many well-established open standards, breeds idiosyncratic patterns of usage&mdash;Rabble and I settled on a three-part design:
        </p>
        <ul>
            <li>A reasonably human-friendly Domain-Specific Language, called "MARCout", that bibliographers could use for specifying desired sequences of MARC elements and the transforms to be applied to the content.</li>
            <li>A MARCout component that would:
                <ul> 
                    <li>parse a MARCout document;</li>
                    <li>self-configure from the parsed MARCout;</li>
                    <li>convert an output record to the stipulated MARC datastructure;</li>
                    <li>serialize the MARC output in several formats (including the mildly notorious <a href='https://en.wikipedia.org/wiki/ISO_2709'>ISO 2709</a> byte-oriented format);</li>
                </ul>
            </li>
            <li>A Web Service wrapper that would isolate MUSICat from the implementation details of the MARCout component.</li>
        </ul>
        <p>
        The component was implemented in Python (nothing else would have been expressive and comprehensible enough for my short deadline). The Webservice was written in Flask. I also wrote&mdash;directly into Rabble's codebase&mdash;the NodeJS client code with which they could call the Web Service and export the result.
        </p>
        <p>
        The project turned out to be highly successful (especially for a rush job in off hours), allowing Rabble to affordably provide the desired customizable MARC21 exports to customers with varying MARC21 composition, format, and serialization requirements.
        </p>
        <p>
        Now if I can just get a couple of the Rabble devs to send me some pull requests for fixes and enhancements they've implemented...
        </p>
        <p>
        This project is at <a href='https://github.com/whblondeau/marcout' target='_blank'>https://github.com/whblondeau/marcout</a>. It includes <a href='https://github.com/whblondeau/marcout/blob/master/examples/export_define.marcout'>an example MARCout file</a>.
        </p>
        <p class='tools'>Python, Flask, linux CLI, git, NodeJS for client code</p>


        <a name='jnpath'></a>
        <h3>Independent project <code>JNPath</code> (ongoing since June 2017)</h3>
        <p class='role'>Language Designer, Developer</p>
        <p>
        I'm highly proficient with the XPath languages and tools for XML. While working with JSON data for Rabble's MUSICat, I became increasingly dissatisfied with the lack of a comparably useful set of declarative capabilities for JSON. JNPath is a pragmatic attempt to provide a considered, limited set of such capabilities. Its pattern-matching expression language avoids the syntax of the XML world, concentrating on familiar JSON notation conventions. Expressions are also designed for cognitive accessibility.
        </p>
        <p>
        JNPath will provide a specification, a reference implementation in Python, a set of derived command line utililties, and a convenience implementation in JavaScript.
        </p>
        <p>
        This project is at <a href='https://github.com/whblondeau/jnpath' target='_blank'>https://github.com/whblondeau/jnpath</a>.
        </p>
        <p class='tools'>JSON, Python, linux CLI, git, JavaScript</p>

        
        <a name='rabble-musicat'></a>
        <h3>Rabble: <code>MUSICat</code> local music curation for public libraries  &mdash; May 2016 to November 2017</h3>
        <p class='role'>Developer, Devops, Data Mechanic</p>
        <p>
        MUSICat is a hosted web app for managing collections of music. It's explicitly designed and built for public libraries. It provides essential capabilities: 
        </p>
        <ul>
            <li>Initial solicitation of music submissions</li>
            <li>Juried selection/curation of submissions</li>
            <li>Honoraria for selected works</li>
            <li>Signed contracts for publication</li>
            <li>Publication of collected music, for streaming and downloads</li>
            <li>Personal playlists for individual library patrons</li>
        </ul>
        <p>
        MUSICat is a single page web app. The front end is implemented in Ember JS and Node JS; the back end is NodeJS and Redis, hosted on a Google Compute Engine Debian server.
        </p>
        <p>
        Examples of live MUSICat sites:
        </p>
        <ul>
            <li><a href='https://capitalcityrecords.ca/' target='_blank'>Capital City Records</a>, Edmonton Public Library</li>
            <li><a href='https://playback.spl.org/' target='_blank'>Seattle PlayBack</a>, Seattle Public Library</li>
            <li><a href='https://boombox.library.nashville.org/' target='_blank'>Nashville BoomBox</a>, Nashville Public Library</li>
            <li><a href='https://yaharamusic.org/' target='_blank'>Yahara Music Library</a>, Madison Public Library</li>
        </ul>
        <p class='tools'>JavaScript, Python, NodeJS, Redis DB, EmberJS, JSON, Google Compute Engine, Debian, linux CLI, git</p>

        <a name='nautilus_admin'></a>
        <h3>Anchor Bank / Old National Bank: Nautilus administration and automation &mdash; December 2015 to May 2016</h3>
        <p class='role'>System Administrator, Documentation specialist, Programmer</p>
        <p>
        Anchor Bank's <a href='https://www.fiserv.com/insights-optimization/enterprise-content-management/nautilus.aspx' target='_blank'>Nautilus</a> document image management system was being administered by a set of manual tasks guided by institutional knowledge that had been lost. Documentation was insufficient. My task was to upgrade the outdated Nautilus system, catch up with elapsed maintenance, properly document the procedures for maintenance, and automate any recurring work that I could. Much of the work involved harvesting information from Nautilus's formatted text reports. Automation was done with Python.
        </p>
        <p>
        Shortly after I came aboard, Old National Bank bought Anchor Bank out. This increased the urgency of knowledge capture and automation, due to anticipated losses of key personnel during the transition period.
        </p>
        <p>
        This project was effective and successful. By the time I myself departed, the necessary aspects of the Nautilus system had been documented, automated, and stabilized.
        </p>
        <p class='tools'>Python, Nautilus admin console, Cygwin CLI, Windows Active Directory</p>

        <a name='rocket_appliances'></a>
        <h3>Independent project <code>rocket-appliances</code> (ongoing)</h3>
        <p class='role'>Researcher, Developer</p>
        <p>
        I was introduced to geospatial coding during some minor work at USGS/CIDA. I was interested enough to dig into the underlying mathematical and geographic concepts. (Face it: generating a map view with multiple superimposed data layers is simply cool.) I responded by developing a conceptual model that represents the key abstractions of geopatial work; this will ultimately be extended into a high-level language specification.
        </p>
        <p>
        This project is at <a href='https://github.com/whblondeau/rocket-appliances' target='_blank'>https://github.com/whblondeau/rocket-appliances</a>.
        </p>
        <p class='tools'>Python, git</p>

        <a name='usgs_ngwmn_mediation_documentation'></a>
        <h3>USGS/CIDA: Documentation of NGWMN &mdash; March and April 2015</h3>
        <p class='role'>Technical Analyst and Writer</p>
        <p>
        The <a href='http://cida.usgs.gov/ngwmn/' target='_blank'>National Groundwater Monitoring Network</a> (NGWMN)&mdash;built, maintained, and operated by CIDA&mdash;had imposed high ongoing costs due to a lack of documentation and an idiosyncratic technology stack. I documented a great deal of it while it was still fresh in mind after the refactoring project listed below.
        </p>
        <p>
        More information, with a link to some samples of delivered content, in <a href='../techwriter/writing_portfolio.htm#ngwmn_documentation_excerpts' target='_blank'>my Technical Writing portfolio</a>.
        </p>
        <p class='tools'>Confluence Wiki, Google Docs</p>


        <a name='usgs_ngwmn_mediation_refactor'></a>
        <h3>USGS/CIDA: Refactor of NGWMN Mediation &mdash; January to March 2015</h3>
        <p class='role'>Researcher, Developer</p>
        <p>
        The <a href='http://cida.usgs.gov/ngwmn/' target='_blank'>National Groundwater Monitoring Network</a> (NGWMN), a portal for shared groundwater quality data from disparate sources, had been running in limited prototype mode for several years. In anticipation of a major increase in the number of participating agencies, I refactored NGWMN's information topology for <em>Mediation</em>, the term of art for accepting information from multiple contributors in arbitrary formats, and converting it to the NGWMN's standard internal data representation.
        </p>
        <p>
        As a necessary part of that, I developed a heavyweight regression test, exercised it, and delivered it with thorough documentation. (You can see a summary documentation excerpt <a href='../portfolio/ngwmn/exercising_and_testing.html#howto_do_regression_test' target='_blank'>here</a>.)
        </p>
        <p class='tools'>Apache Cocoon, Python, XML/XSLT, Oxygen XML Editor</p>


        <a name='usgs_nagios'></a>
        <h3>USGS/CIDA: Internal monitoring using NAGIOS &mdash; November 2014 to January 2015</h3>
        <p class='role'>Researcher, Developer</p>
        <p>
        CIDA was evaluating <a href='https://en.wikipedia.org/wiki/Nagios' target='_blank'>NAGIOS</a>, an open source framework for monitoring server, network, and application assets. I wrote a <a href='https://github.com/wblondeau-usgs/tomcat-monitor' target='_blank'>prototype client in Python</a> that would invoke the built-in self-reporting capabilities of <a href='http://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html' target='_blank'>Tomcat Manager</a> included by default in each installation of the Apache Tomcat HTTP Server.
        </p>
        <p class='tools'>NAGIOS, Python, Python Requests, Python Beautiful Soup, Tomcat HTTP Server, Tomcat Manager, REST, bash scripting</p>


        <a name='usgs_pubs_warehouse_bdd'></a>
        <h3>USGS/CIDA: USGS Pubs Warehouse behavioral testing &mdash; October &amp; November 2014</h3>
        <p class='role'>Developer</p>
        <p>
        The <a href='http://pubs.er.usgs.gov/' target='_blank'>USGS Publications Warehouse</a> provides online access to the very large, and continually increasing, store of official USGS publications. Internal document management was being implemented using JSON notation for semantics. I was tasked with writing Behavioral Tests in Gherkin to ensure that the mechanism for documents to supersede previous versions was correct.
        </p>
        <p class='tools'>Python, JSON, Lettuce BDD framework, Gherkin</p>


        <a name='usgs_pywqp'></a>
        <h3>USGS/CIDA: pywqp Water Quality Dataset Client &mdash; June to September 2014</h3>
        <p class='role'>Developer</p>
        <p>
        The <a href='http://waterqualitydata.us' target='_blank'>Water Quality Data Portal</a>, built and operated by CIDA, offers a web client for download of large datasets. This project created a complementary scriptable Python client to accomplish the same task. See <a href='https://github.com/wblondeau-usgs/pywqp' target='_blank'>the pywqp GitHub repository</a> for code, documentation, and details.
        </p>
        <p class='tools'>Python, Python-Requests, REST, Lettuce BDD framework, Gherkin</p>


        <a name='usgs_ngwmn_service_extension'></a>
        <h3>USGS/CIDA: NGWMN Groundwater Service extension &mdash; July 2013</h3>
        <p class='role'>Developer</p>
        <p>
        CIDA had collaborated with the Canadian agency <a href='http://www.nrcan.gc.ca/earth-sciences/science/water/groundwater/10988' alt='NRCAN Groundwater site' target='_blank'>NRCAN</a> to do some proof of concept cross-border groundwater data sharing, connecting the <a href='http://cida.usgs.gov/ngwmn/' target='_blank'>National Groundwater Monitoring Network</a> (NGWMN) via parts of the <a href='http://www.opengeospatial.org/standards/sos'>OGC Sensor Observation</a> web services.
        </p>
        <p>
        On a short timeframe, NRCAN requested that the SOS service suite be fully implemented to support a cross-border information sharing demo for the United Nations. I assisted with that, and received a knowledge transfer from a departing engineer while doing so. I <strong>documented</strong> everything I could learn about the NGWMN.
        </p>
        <p>
        Apparently the UN was duly impressed with the demo.
        </p>
        <p class='tools'>Java Spring, OGC SOS specification, Google Docs</p>
        
        
        <a name='usgs_fish_mobile_installer'></a>
        <h3>USGS/CIDA: Automated Installer for WDNR Fish Mobile AppDecember 2013 to January 2014</h3>
        <p class='role'>Developer, Researcher</p>
        <p>
        There was no automated install/update utility for the new Fish Mobile App, and WDNR needed to install it on a lot of Windows tablets. Working with a tech-savvy Project Lead, designed and built a utility that installed Python and CouchDB (adjusting for variations in the Windows security model), and then used Python to control installation and setup of the application via CouchDB's REST API. 
        </p>
        <p>
        Very interesting (and oddly rewarding) project.
        </p>
        <p class='tools'>Python, CouchDB, REST, Python Requests, Windows cmd.exe</p>
        
        
        <a name='usgs_techdebt'></a>
        <h3>USGS/CIDA: Technical Debt containment advocacy &mdash; April 2013 to March 2015</h3>
        <p class='role'>Analyst, Evangelist</p>
        <p>
        Ongoing campaign to introduce the concept of <a href='http://martinfowler.com/bliki/TechnicalDebt.html' target='_blank'>Technical Debt</a>; to raise awareness of Technical Debt's nature and severity; and to advocate for its containment and reduction, among management and staff at CIDA. This was particularly important given CIDA's funding model and large deployed portfolio of successful major applications.
        </p>
        <p>
        Gratifyingly, CIDA to this day uses Technical Debt as a concept when reasoning about architecture, design, and support for applications.
        </p>
        <p class='tools'>Google Presentations, email, stand &amp; deliver</p>


        <a name='wqp_rewrite'></a>
        <h3>USGS/CIDA: Water Quality Portal rewrite &mdash; May 2013 to July 2014</h3>
        <p class='role'>Architect/Designer, Developer</p>
        <p>
        The <a href='http://acwi.gov/monitoring/' target='_blank'>National Water Quality Monitoring Council</a>'s <a href='http://www.waterqualitydata.us/' target='_blank'>Water Quality Portal</a> is a high-volume download mechanism for very large datasets from disparate sources.
        </p>
        <p>
        Built high-performance multiformat SAX aggregator for XML content from multiple HTTP response streams.
        </p>
        <p class='tools'>Java, XML, SAX, Apache HttpClient</p>



        <a name='fish_mobile_bdd'></a>
        <h3>USGS/CIDA: WDNR Fish Mobile App BDD &mdash; February 2013 to June 2013</h3>
        <p class='role'>Developer. Test Suite Designer</p>
        <p>
        <a href='http://dnr.wi.gov' target='_blank'>Wisconsin DNR</a> uses tablets in the field for <a href='http://dnr.wi.gov/topic/fishing/north/trtysprngsrvys.html' target='_blank'>biological surveys of fish populations</a>.
        </p>
        <p>
        Assisted with conversion of native Java app to online/offline Web app.
        </p>        
        <p>
        Designed and developed extensive Behavior-Driven Development test suite.
        </p>
        <p class='tools'>Cucumber, Gherkin, PhantomJS, Java, CoffeeScript, CouchDB</p>


        <a name='aurora_fashions'></a>
        <h3>Aurora Fashions mobile site &mdash; July 2012 to October 2012</h3>
        <p class='role'>Project Manager/Mobile Web Developer/Xpath Specialist</p>
        <p>
        Coordinated work between teams in Britain, San Francisco, and Madison.
        </p>        
        <p>
        Wrote core transformation code to convert eCommerce site to mobile website.
        </p>
        <p>
        Worked with HTML5 and CSS3 to control appearance and behavior of resulting site.
        </p>
        <p class='tools'>CSS3/SASS, HTML5/HAML, Tritium transformation language, JavaScript</p>


        <a name='alice_law'></a>
        <h3>ALICE Law search website &mdash; June and July 2012</h3>
        <p class='role'>Web Developer/Data Wrangler</p>
        <p>
        Generated large quantities of sample data from raw program inputs.
        </p>
        <p>
        Built Front-end components.
        </p>
        <p>
        Worked with Designer to implement user interface.
        </p>
        <p class='tools'>Ruby on Rails, Python, HTML5/HAML, CSS3/SASS</p>


        <a name='amfam_data_warehouse'></a>
        <h3>American Family Insurance: Financial Data Warehousing &mdash; Sept 2011 to March 2012</h3>
        <p class='role'>Data Architect</p>
        <p>
        Defined operational data feed to general ledger.
        </p>
        <p>
        Developed logical models for financial data in dimensional warehouse.
        </p>
        <p>
        Worked with Project Management to define workflow and goals.
        </p>
        <p class='tools'>Enterprise Architect, Visio</p>



        <h3>TDS Telecommunications: Enterprise Java Support &mdash; June 2011 to August 2011</h3>
        <p class='role'>Java and Database Developer/Analyst</p>
        <p>
        Bugfixes and short-term enhancements to a large, highly complex legacy J2EE application.
        </p>
        <p>
        Fixed problems and contributed minor modifications.
        </p>
        <p>
        Performed cost/benefit analysis for various fix strategies.
        </p>
        <p>
        Wrote DDL for database modifications.
        </p>
        <p class='tools'>Java, Linux, Oracle, SQL Developer, Spring, Eclipse, JBoss, Python</p>



        <h3>State of WI, ETF: Java Framework Evaluation and Component Architecture &mdash; October 2010 to May 2011</h3>
        <p class='role'>Senior Developer/SOA Architect</p>
        <p>
        Worked with a team of senior ETF Developers to evaluate Java Frameworks.
        </p>
        <p>
        Designed, recommended, and delivered a component Service Oriented Architecture.
        </p>
        <p>
        Researched and evaluated candidate Enterprise Java frameworks including Spring, Struts, and MyBatis.
        </p>
        <p>
        Designed a scalable component-style SOA and XML datamodel for ETF's increased Web presence.
        </p>
        <p class='tools'>Java, Spring, Struts, RAD/Websphere, MyBatis, XML Schema, XSLT, Python</p>



        <a name='e-citation_monitoring'></a>
        <h3>State of WI, OJA: Distribution Monitoring Application &mdash; February 2010 to October 2010</h3>
        <p class='role'>Graphic Designer/Technical Developer</p>
        <p>
        Designed and developed a monitoring and display application to display operational status of a mission-critical traffic citation distribution/forwarding application.
        </p>
        <p class='tools'>XQuery, eXist, oXygen XML Editor, XSLT, CSS</p>



        <h3>State of WI, OJA: "SSAF" Simple Information Sharing Application &mdash; April 2008 to May 2010</h3>
        <p class='role'>Specification Author/Implementation Designer/Project Lead/Developer</p>
        <p>
        Designed a rugged and simple information sharing software appliance. "SSAF" is an acronym for "Secure Storage and Forwarding"; the appliance is a loosely coupled outward-facing Web app optimized for agencies with small technical resources.
        </p>
        <p>
        Wrote  SSAF as a platform-neutral Specification, so that this appliance can be implemented in any desired language (Python, Java, Ruby, .NET etc) for any platform.
        </p>
        <p>
        Published Specification at http://wijiscommons.org/
        </p>
        <p>
        Technical Lead for a project to implement the Specification in Java and deliver it to a large metropolitan police force and corresponding county sheriff in order to facilitate booking data exchange and upload of incident data to the FBI.
        </p>
        <p class='tools'>XML Schema, REST, SOAP, Java, Python</p>



        <h3>Voter Legal Support Google Maps Application &mdash; October and November 2008</h3>
        <p class='role'>Designer/Developer/Host/Operational Support</p>
        <p>
        Designed, developed, and deployed a Google Maps application that provided color and size coding of polling locations (for various factors that flagged each place's likelihood of requiring legal assistance for voters), parametric selection of displayed polls, and drill-down to detailed information on any displayed polling place. 
        </p>
        <p class='tools'>Google Maps API, JavaScript, XHTML/CSS</p>


        <a name='e-citation'></a>
        <h3>State of WI, OJA: Electronic Citation Distribution Application &mdash; September 2007 to March 2008</h3>
        <p class='role'>Project Technical Lead/Developer</p>
        <p>
        Adopted a stalled project and pushed it through to going live. Project involved accepting REST uploads of traffic citations and dispatching them to appropriate destinations (District attorneys, Circuit courts etc.)
        </p>
        <p>
        Rewrote entire existing XQuery codebase for maintainability and stability.
        </p>
        <p>
        Completed unfinished functionality.
        </p>
        <p>
        Redesigned workflow operations.
        </p>
        <p class='tools'>XML, REST, XQuery, eXist XML database, oXygen XML editor, XSLT, CSS</p>


        <a name='cdcl'></a>
        <h3>State of WI, OJA: Disclosure Control Language and Framework &mdash; April 2006 to February 2009</h3>
        <p class='role'>Language and Framework Primary Developer/Project Lead</p>
        <p>
        Invented two languages and a set of framework components to solve the very difficult problem of Rule-based Information Disclosure Control in a multi-author setting, presenting the results at several national conferences.
        </p>
        <p>
        Invented a Boolean rule definition language based on indented bulleted lists.
        </p>
        <p>
        Designed a higher level graph-based language on top of RDF for unbreakable rule formulations.
        </p>
        <p class='tools'>RDF, EBNF, Graph Theory mathematics, Python, Java</p>



        <h3>State of WI, OJA: "Gateway" Disparately Sourced Data Search/ Retrieval Application &mdash; November 2005 to August 2007</h3>
        <p class='role'>Data Architect/Designer/Project Lead/Developer</p>
        <p>
        Defined the high-level system architecture, and redefined it several times to adapt to a chronically unstable deployment context.
        </p>
        <p>
        Designed the message formats and search/retrieval paradigm.
        </p>
        <p>
        Designed a "cached pointer/sourced retrieval" strategy for searching data distributed over hundreds of autonomous sources.
        Wrote heavily annotated XML Schema definitions for message conversation patterns.
        </p>
        <p>
        Wrote components (including a high-speed shredder for XML messages entering an RDBMS) of the application, in Java.
        </p>
        <p class='tools'>Java, Hibernate, XML, XML Schema, SAX, Python


        <a name='slam'></a>
        <h3>State of WI, CCAP: "SLAM" Layout Language and Metalanguage Design and Implementation &mdash; October 2005</h3>
        <p class='role'>Language Designer/Implementor/Project Lead</p>
        <p>
        Wrote a simplified XML layout language that described essential page layout items for Circuit Court forms in general, flexible syntax.
        </p>
        <p>
        Implemented the language in CSS 2.1.
        </p>
        <p>
        Designed a higher-level "metalanguage" to denote frequently-recurring elements.
        </p>
        <p class='tools'>XML, CSS 2.1, XSLT</p>



        <h3>State of WI, CCAP: Configuration Server API Specification &mdash; August 2005 to September 2005</h3>
        <p class='role'>Architect/Designer/Specification Author</p>
        <p>
        Designed a simple request-response protocol for managing configuration information. Requests are all URIs, and responses are all XML.
        </p>
        <p>
        Wrote specification for representing configuration states and operations.
        </p>
        <p class='tools'>URI, XML</p>



        <h3>State of WI, CCAP: Versioned Database Descriptor Architecture &mdash; June 2005 to August 2005</h3>
        <p class='role'>Information Architect/Component Model Designer</p>
        <p>
        Defined XML Descriptors for state descriptions for databases.
        </p>
        <p>
        Defined XML Descriptors for change events.
        </p>
        <p>
        Defined a simple component model to interoperate between State descriptors, Change Descriptors, and actual database instances.
        </p>
        <p class='tools'>XML, DDL, SQL</p>



        <h3>State of WI, CCAP: Production Support Enhancement &mdash; September 2004 to September 2005</h3>
        <p class='role'>Production Support Specialist/ Designer/Developer</p>
        <p>
        Provided ongoing support, troubleshooting, and monitoring while simultaneously introducing useful improvements at the process and utility level.
        </p>
        <p>
        Wrote and executed SQL queries against production data.
        </p>
        <p>
        Wrote numerous Python scripts to automate key support processes.
        </p>
        <p>
        Wrote multiple special-purpose, in-house Web applications to provide monitoring and administration of production processes.
        </p>
        <p>
        Modified production Java applications to improve reliability, auditability, and logging.
        </p>
        <p class='tools'>Java, Python, XML, SQL</p>



        <h3>State of WI, CCAP: E-Filing Message Handling applications &mdash; November 2004 to April 2005</h3>
        <p class='role'>Architect/Designer/Specification Author</p>
        <p>
        Wrote applications to retrieve submitted messages from message queues, modify the messages on the fly according to extrinsic transform specifications.
        </p>
        <p>
        Wrote message-handling agent applications in Java.
        </p>
        <p>
        Specified RDF-compliant URI message definition model.
        </p>
        <p>
        Defined message transformation/configuration XSLT formats.
        </p>
        <p>
        Implemented multiple message type definitions for processing.
        </p>
        <p class='tools'>Java, RDF, XML, XSLT, SMTP</p>



        <h3>State of WI, CCAP: Various Projects  &mdash; May 2003 to December 2004</h3>
        <p class='role'>Developer/Maintainer/Designer</p>
        <p>
        Performed maintenance on queue-based messaging systems.
        </p>
        <p>
        Diagnosed the incompatibility between the fundamental concepts of dates and times as year/month/day/hour/minute on the one hand, and the (Java standard) millisecond stream on the other. Designed and built a package of value classes that avoided the problem, while providing comparable date.
        </p>
        <p class='tools'>Java URI/URL, XML, RDF</p>



        <h3>Beacon Technologies: Workflow Management Application &mdash; November 2002 to February 2003</h3>
        <p class='role'>Data Designer/XML expert/XSLT Developer</p>
        <p>
        An in-house application designed to graphically describe complicated workflow processes without sacrificing sophistication and flexibility.
        </p>
        <p>
        Designed the XML structures for run-time representation and for persistence.
        </p>
        <p>
        Wrote XSLT transformations to create Java 2D serializations during retrieval.
        </p>
        <p class='tools'>XML, XML Schema, XSLT, Java</p>



        <h3>SBSA: Vehicle Repair Invoice Entry and Management &mdash; September 2002 to December 2002</h3>
        <p class='role'>Analyst/Designer/Programmer</p>
        <p>
        Designed and implemented a Web front end for real-time invoice entry and general invoice status tracking. Requirements included fast query execution, low server load, and strict data confidentiality.
        </p>
        <p class='tools'>JavaScript, XML, CSS, XHTML, ASP, MS SQL Server</p>



        <h3>CUNA Mutual Insurance: Insurance/Finance application &mdash; Jan 2001 to August 2002</h3>
        <p class='role'>Project Lead/Designer/Developer/Mentor</p>
        <p>
        Designed and implemented an XML Query Definition engine.
        </p>
        <p>
        Designed XML query definition formats and XSLT SQL transformers.
        </p>
        <p>
        Designed and implemented a cross-database reporting system.
        </p>
        <p>
        Designed and implemented the server monitoring system in ASP/XML/CSS.
        </p>
        <p>
        Responsible for performing all bug fixes within a tight timeframe.
        </p>
        <p>
        Mentored team members in web development and SQL.
        </p>
        <p class='tools'>ASP, HTML/CSS, XML, XSLT, JavaScript, VB6, Java, DB2, MQ-Series, JSP, ASP, XPath, XSLT, Lotus Notes</p>



        <h3>American Family Insurance: Web Based Enterprise Application and Staff Performance Award &mdash; September 2000 to December 2000</h3>
        <p class='role'>Designer/Developer</p>
        <p>
        Built an internally complex application with a simple web navigational interface.
        </p>
        <p class='tools'>ASP, JavaScript, HTML/CSS, Oracle 8i, IIS</p>



        <h3>GE Medical: Service/Web Based Applications - April 2000 to August 2000</h3>
        <p class='role'>Project Lead/Designer/Developer</p>
        <p>
        Developed a system to handle XML calls across the Internet between Active Server Pages and Java Server Pages for a Web-based time and expense tracking system.
        </p>
        <p>
        Developed a Web application as front end to an Oracle database for managing corporate acquistions.
        </p>
        <p class='tools'>ASP, HTML, IIS, Java, JavaScript, JSP, SOAP, SQL, SQL Server, VBScript, Windows NT Server, XML</p>



        <h3>Cap Gemini Consulting: various projects &mdash; June 1999 to March 2000</h3>
        <p class='role'>Developer/Designer/Trainer</p>
        <p>
        Complex SQL application for high-volume EDI submissions of Medical data.
        </p>
        <p>
        Web Development trainer.
        </p>
        <p>
        Web Services researcher.
        </p>
        <p class='tools'>TextPad, Sybase, PowerPoint</p>



        <h3>InterMedia LLC: Student Information Systems &mdash; June 1997 to June 1999</h3>
        <p class='role'>Developer/Designer</p>
        <p>
        Developed back-end database.
        </p>
        <p>
        Developed Windows client applications.
        </p>
        <p>
        Developed Web client applications.
        </p>
        <p class='tools'>MS SQL Server, VB 3-5, ASP, VBScript, JavaScript, HTML</p>
    </div>
</body>
